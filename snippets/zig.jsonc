{
    // Place your snippets for go here. Each snippet is defined under a snippet name and has a prefix, body and
    // description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
    // $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the
    // same ids are connected.
    // Example:
    "main": {
        "description": "main func",
        "prefix": "mains",
        "body": [
            "const std = @import(\"std\");\n",
            "pub fn main() !void {",
            "std.debug.print(\"Hello, {s}!\\n\", .{\"World\"});",
            "}"
        ]
    },
    "Std Out Writer": {
        "description": "Get the stdout writer",
        "prefix": "gso",
        "body": [
            "const stdoutFile = std.io.getStdOut().writer();"
        ]
    },
    "print": {
        "description": "debug print",
        "prefix": "print",
        "body": [
            "std.debug.print(\"$1\\n\", .{$2});"
        ]
    },
    "import": {
        "prefix": "imp",
        "body": [
            "const $1 = @import(\"$2\");"
        ]
    },
    "import std": {
        "prefix": "istd",
        "body": [
            "const std = @import(\"std\");"
        ]
    },
    "allocator param": {
        "prefix": "palloc",
        "body": [
            "allocator: std.mem.Allocator"
        ]
    },
    "Print Stdout": {
        "description": "Print to std out wrtiter",
        "prefix": "stp",
        "body": [
            "try stdout.print(\"$1\\n\", .{$2});"
        ]
    },
    "GPA": {
        "description": "Init a GPA",
        "prefix": "newGPA",
        "body": [
            "var gpa = std.heap.GeneralPurposeAllocator(.{}){};",
            "const allocator = gpa.allocator();",
            "defer {",
            "const c = gpa.deinit();",
            "switch (c) {",
            ".ok => {},",
            ".leak => std.debug.print(\"leaked\\n\", .{}),",
            "}",
            "}"
        ]
    },
    "Arena alloc": {
        "description": "Init an Arena",
        "prefix": "newArena",
        "body": [
            "var gpa = std.heap.GeneralPurposeAllocator(.{}){};",
            "defer _ = gpa.deinit();",
            "var arena = std.heap.ArenaAllocator.init(gpa.allocator());",
            "defer arena.deinit();",
            "const allocator = arena.allocator();"
        ]
    },
    "Random": {
        "description": "Init random",
        "prefix": "newRand",
        "body": [
            "var prng = std.Random.DefaultPrng.init(blk: {",
            "var seed: u64 = undefined;",
            "try std.posix.getrandom(std.mem.asBytes(&seed));",
            "break :blk seed;",
            "});",
            "const rand = prng.random();"
        ]
    }
}
