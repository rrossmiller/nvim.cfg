{
    // Place your snippets for go here. Each snippet is defined under a snippet name and has a prefix, body and
    // description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
    // $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the
    // same ids are connected.
    // Example:
    "mains": {
        "prefix": "mains",
        "body": [
            "package main\n\nimport \"fmt\"",
            "\nfunc main()  {\n\tfmt.Println(\"Hello, world!\")\n\t$0\n}"
        ],
        "description": "Log output to console"
    },
    "Print to console": {
        "prefix": "fp",
        "body": [
            "fmt.Println($1)"
        ],
        "description": "Println"
    },
    "Printf to console": {
        "prefix": "fpf",
        "body": [
            "fmt.Printf(\"$1\\n\",$2)"
        ],
        "description": "Println"
    },
    "Check Error": {
        "prefix": "cherr",
        "body": [
            "if err != nil {\npanic(err)$1\n}"
        ],
        "description": "panic on error"
    },
    "Check Error Return": {
        "prefix": "cherrr",
        "body": [
            "if err != nil {\nreturn err\n}"
        ],
        "description": "check err return"
    },
    // "Stringer": {
    //     "prefix": "Stringer",
    //     "body": ["func ($1) String() string{$2}"],
    //     "description": "stringer"
    // }
    "handler": {
        "prefix": "handler",
        "body": [
            "func $1(node *sitter.Node, src []byte) string {",
            "var sb strings.Builder",
            "fmt.Println(\"****\")",
            "fmt.Println(node, node.ChildCount())",
            "for i := 0; i < int(node.ChildCount()); i++ {",
            "child := node.Child(i)",
            "var txt string",
            "switch child.Type() {",
            "default:",
            "txt = util.GetNodeText(child, src)",
            "}",
            "sb.WriteString(txt)",
            "}",
            "fmt.Println(\"****\")\n",
            "return sb.String()\n}"
        ]
    }
}
